---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zengbin.
--- DateTime: 2023/10/16 19:42
---通过lua脚本是ip动态的封禁，即实现ip黑名单的自动增删
local ip_block_time=60 ---封禁IP时间（秒），1分钟解封
local ip_time_out=30    ---指定ip访问频率时间段（秒），30秒最大能访问40次
local ip_max_count=40   ---指定ip访问频率计数最大值（秒）
local BUSINESS = ngx.var.business  ---nginx的location中定义的业务标识符，也可以不加，不过加了后方便区分
---连接redis
local redis = require "resty.redis"
local conn = redis:new()
ok, err = conn:connect("127.0.0.1", 6379)
ngx.log(ngx.INFO, "redis connect=" .. tostring(ok) .. " err=" .. tostring(err))   ---打印调试日志
ok, res = conn:auth("default","123456")
ngx.log(ngx.INFO, "redis auth=" .. tostring(ok) .. " res=" .. tostring(res))   ---打印调试日志
conn:set_timeout(2000)  ---超时时间2秒

remote_addr = ngx.var.remote_addr
ngx.log(ngx.INFO, "business=" .. BUSINESS .. " ,remote_addr=" .. remote_addr)

---如果连接失败，跳转到脚本结尾
if not ok then
    ngx.exit(403)
    goto FLAG
end

---查询ip是否被禁止访问，如果存在则返回403错误代码
is_block, err = conn:get(BUSINESS.."-BLOCK-"..remote_addr)
if is_block == '1' then
    ngx.log(ngx.ERR, "redis is block = " .. tostring(is_block) .. " error=" .. tostring(err))   ---打印调试日志
    ngx.exit(403)
    goto FLAG
end

---查询redis中保存的ip的计数器
ip_count, err = conn:get(BUSINESS.."-COUNT-"..remote_addr)
ngx.log(ngx.INFO, "redis is_block = " .. tostring(is_block) .. " ip_count = " .. tostring(ip_count) .. " err = " .. tostring(err))   ---打印调试日志
if ip_count == ngx.null then  ---如果不存在，则将该IP存入redis，并将计数器设置为1、该KEY的超时时间为ip_time_out
    res, err = conn:set(BUSINESS.."-COUNT-"..remote_addr, 1)
    res, err = conn:expire(BUSINESS.."-COUNT-"..remote_addr, ip_time_out)
else
    ip_count = ip_count + 1 ---存在则将单位时间内的访问次数加1

    if ip_count >= ip_max_count then  ---如果超过单位时间限制的访问次数，则添加限制访问标识，限制时间为ip_block_time
        res, err = conn:set(BUSINESS.."-BLOCK-"..remote_addr, 1)
        res, err = conn:expire(BUSINESS.."-BLOCK-"..remote_addr, ip_block_time)
    else
        res, err = conn:set(BUSINESS.."-COUNT-"..remote_addr,ip_count)
        res, err = conn:expire(BUSINESS.."-COUNT-"..remote_addr, ip_time_out)
    end
end

--- 结束标记
::FLAG::
local ok, err = conn:close()
